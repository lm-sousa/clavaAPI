/**
 * Reprents a metric we want to extract.
 * @constructor
 * @param {string} name - The name of the metric
 */
function Metric(name) {
	checkDefined(name, "Metric::name");
	this.name = name;
}

Metric.prototype.getName = function() {
	return this.name;
}

/**
 * Instruments code so that when executed, it produces information about the metric to measure.
 * @param {joinpoint} $start - join point representing the start point of the instrumentation
 * @param {joinpoint} [$end=$start] - join point representing the end point of the instrumentation
 */
Metric.prototype.instrument = function($start, $end) {
		notImplemented("Metric.instrument");
}

/**
 * Extract metric.
 *
 * @param {L#lara.util.ProcessExecutor} processExecutor - instance after program execution
 * @return {L#lara.metrics.MetricResult} metric after program execution
 */
Metric.prototype.report = function(processExecutor) {
		notImplemented("Metric.report");
}

/**
 * @returns {string} A string with the LARA import of this Metric.
 */
Metric.prototype.getImport = function() {
		notImplemented("Metric.getImport");
}

/**
 * @returns {string} A string with the current unit of this metric.
 */
Metric.prototype.getUnit = function() {
		notImplemented("Metric.getUnit");
}