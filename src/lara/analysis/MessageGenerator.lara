import weaver.Query;
import lara.Io;
import lara.analysis.ResultList;

// Class sorting resultLists and generating an analysis report

var MessageGenerator = function(printMessage, writeFile) {

    this.globalFileResultList = {};
	this.printMessage = printMessage === undefined ? true : printMessage;
	this.writeFile = writeFile === undefined ? false : writeFile;
	//this.printMessage = true;
    //this.fileOutputFlag = false;
};

MessageGenerator.prototype.enableFileOutput = function() {
	this.writeFile = true;
}

MessageGenerator.prototype.append = function(resultList) {
    if (resultList === undefined) {
    		return;
    }     
    var fileName = resultList.fileName;
    var fileResultList = this.globalFileResultList[fileName];
    if (fileResultList === undefined) {
        fileResultList = [];
        this.globalFileResultList[fileName] = fileResultList;
    }
    for (var result of resultList.list) {
        fileResultList.push(result);
    }
}

MessageGenerator.prototype.generateReport = function() {
    if (this.globalFileResultList === undefined) {
    		return;
    }

	var allMessages = {};
	
    for (var fileName in this.globalFileResultList) {
		var messages = [];
        //var message = "";

        for (var result of this.globalFileResultList[fileName]) {
            //message += fileName + "/l." + result.node.line + ": " + result.message;
			messages.push(fileName + "/l." + result.node.line + ": " + result.message);
        }
		
		if(this.writeFile || this.printMessage) {
			var message = messages.join("\n");
			if(this.printMessage) {
				println(message);
			}
			
			if(this.writeFile) {
				var analysisFileName = Io.getPath(Clava.getData().getContextFolder(), "AnalysisReports/analysis_" + fileName + "_report.txt");
				Io.writeFile(analysisFileName, message);
			}			
		}
		
/*
        if (this.fileOutputFlag === 0) {
		      println(message);
		      return;
	      }
        Io.writeFile(analysisFileName, message);
*/
		
		// Store messages of file
		allMessages[fileName] = messages;
    }
	
	return allMessages;
}
