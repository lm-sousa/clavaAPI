import weaver.jp.JoinPoint;
import weaver.jp.CommonJoinPointsBase;
import weaver.JoinPoints;
import weaver.Ast;
import lara.Check;


/**
 *
 * @return {$jp[]} the children of the given node
 */
 
JoinPoints.prototype._all_children = function($jp) {
	return CommonJoinPoints.toJoinPoints(Ast.getChildren($jp.astNode));
}

/**
 *
 * @return {$jp} the parent of the given node
 */
 
JoinPoints.prototype._parent = function($jp) {
	var parent = Ast.getParent($jp.astNode);
	
	if(parent !== undefined)
		return CommonJoinPoints.toJoinPoint(parent);
		
	return undefined;
}

/**
 *
 * @return {$jp[]} the descendants of the given node
 */
 
JoinPoints.prototype._all_descendants = function($jp) {
	return CommonJoinPoints.toJoinPoints(Ast.getDescendants($jp.astNode));
}

/**
 *
 * @return {$jp[]} all the nodes that are inside the scope of a given node
 */
 
JoinPoints.prototype._all_scope_nodes = function($jp) {
	return [];
}


/**
 * 
 * @return {Object} the current root node of the AST.
 */
 
JoinPoints.prototype.root = function() {
	return CommonJoinPoints.toJoinPoint(Ast.root());
}

/**
 * Getter of the parent of a joinpoint
 * 
 */
 
JoinPoints.prototype.getParent = function($jp) {
	return this._parent($jp);
}

/**
 *  Getter of the children of a joinpoint
 * 
 */
 
JoinPoints.prototype.getChildren = function($jp) {
	return this._all_children($jp);
}

/**
 *  Getter of the descendants of a joinpoint
 * 
 */
JoinPoints.prototype.getDescendants  = function($jp) {
	return this._all_descendants($jp);
}

/**
 * Checks if the given value is a join point. If a type is given, checks if the join point is an instance of the given type. Otherwise, throws an exception.
 *
 * @param $jp
 * @param type
 * @param {boolean} [isOptional=false] - If true, passes check if value is undefined
 */
Check.isJoinPoint = function($jp, type, isOptional) {
		
	if(isOptional && $jp === undefined) {
		return;
	}	

		
	if(!($jp instanceof JoinPoint)) {
		println("$jp:");
		printlnObject($jp);
		throw "Expected variable $jp to be of type (common) JoinPoint, but it is of type '" + (typeof $jp) + "'";
	}

	if(type !== undefined && !$jp.instanceOf(type)) {
		throw "Expected join point to be an instance of type '"+type+"' but its type is '"+$jp.joinPointType+"'";		
	}
}

Weaver.getDefaultAttribute = function(joinPointType) {
	checkString(joinPointType);
	var laraCommonLang = Java.type("pt.up.fe.specs.lara.commonlang.LaraCommonLang");
	return laraCommonLang.getDefaultAttribute(joinPointType);
}
